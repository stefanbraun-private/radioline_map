Installation Python3 Entwicklungsumgebung.txt

div. Notizen und kurze Wegleitung für steinigen Weg der Entwicklung in Python...

Stefan Braun / sbraun@datacomm.ch

[Warnung: Text ist "work in progress"]
==>to do: sobald Weg gefunden ist, diesen sauber dokumentieren!!!

-damit Entwicklersystem als Ganzes gesichert werden kann:
=>Windows-Installation in VMware Workstation Player
=>für performante Entwicklungsumgebung: virtuelle Maschine auf SSD-Partition speichern
  (Risiko: grösserer "Flash-Wear-Out" der SSD...
   =>Vermeidung vorzeitiger Verschleiss: im Gast-OS Defragmentierungs-Zeitplan deaktivieren,
     zudem die SSD nicht vollständig füllen)


Anpassung per 10.10.2018: Entwicklersystem: Win7 x86 (32Bit!!!)
Dies ist der kleinste gemeinsame Nenner der Ziel-Plattformen,
und gemäss diversen Quellen müssen somit portable EXE-Dateien direkt auf der Zielplattform erstellt werden!
(PyInstaller: Python-Code wird mitsamt Python-Interpreter und allen notwendigen Python-Modulen zusammengepackt)

=>darum Python 3 x32 (Anaconda3) als Root-Anaconda-Environment


1) Installation Anaconda:
https://www.anaconda.com/download/

=>Installation "all users"
=>Zu Beachten: Pfad ohne Leerzeichen: https://docs.anaconda.com/anaconda/faq#in-what-folder-should-i-install-anaconda-on-windows
==>gewählt: C:\Anaconda3
=>Installation ohne "Microsoft VSCode".


2) ev: GitHub Desktop installieren
https://desktop.github.com/
https://central.github.com/deployments/desktop/desktop/latest/win32


3) Git for Windows installieren
(gemäss https://github.com/desktop/desktop/issues/3801
können so externe Programme wie z.B. PyCharm Git-Funktionalität nutzen)
https://gitforwindows.org/

=>bei Installation: Notepad++ als Git-Standard-Editor konfigurieren.


4) PyCharm installieren
PyCharm Community Version wählen
=>Achtung: Version "pycharm-community-2018.2.4" funktioniert gut,
           neuere Versionen zeigen viele Fehlalarme bei Imports an...
https://www.jetbrains.com/pycharm/download/#section=windows

=>Desktop-Link "64-bit launcher"
=>.py File Association erstellen
=>"Download and install JRE x86 by JetBrains" (irgendwo stand diese Empfehlung...)


5) neues Projekt "radioline_map"
-"Pycharm" starten, "create new "project",
Name/Ablageort normalerweise im Benutzerverzeichnis: "C:\Users\Asenta\PycharmProjects\radioline_map"
(neues Conda-Environment "radioline_map" (Python 3.x) erstellen lassen,
Option "Make available to all projects" nicht aktivieren)

-"Pycharm" -> New Python package: "radioline_map" ->ergibt Unterordner im Python-Projektordner

=>es ist nicht vorgesehen, dass "radioline_map" Funktionalität zur Verfügung stellt,
  darum nur Windows-Binaries und Sourcecode auf GitHub (kein PyPI-Paket)



Zum Start der Programmierung alle Python-Packages im aktuellen Environment auf den aktuellen Stand bringen:
-"Pycharm" beenden
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate radioline_map"
-conda selber aktualisieren: "conda update -n base conda"
-das Anaconda-Metapaket aktualisieren: "conda install -c anaconda python"


-"Pycharm" -> "Settings" -> "Project: radioline_map" -> "Interpreter"
  (für Veröffentlichung benötigt)
  -> Package "PyInstaller" in Pycharm via PyPI installieren (grünes "Conda"-Icon NICHT aktiv, dann "+")
  ===>NEIN! wegen Inkompatibilität mit "jinja2": Installation von "py2exe" mittels pip
  ===>NEIN! leider ist py2exe nicht mit Python 3.6 kompatibel... :-(
  =>Versuch mit "Cx_Freeze", siehe weiter unten...

  (für Entwicklung benötigt)
  -> Package "pyserial" via Conda installieren (grünes "Conda"-Icon aktiv, dann "+")
  -> Package "folium" via PyPI installieren (grünes "Conda"-Icon inaktiv, dann "+")
     zur Vermeidung von Inkompatibilitäten installierte Version notieren
     ("requirements.txt" pflegen;
      Pycharm könnte dann die benötigten Abhängigkeiten nachinstallieren)

  ==>ACHTUNG: zur Zeit hat mein PyCharm offenbar diverse Probleme mit externen DLLs (z.B. mit Package "numpy" und "matplotlib"... :-(
              =>in PyCharm unten in der "Python Console" klappt es bei mir noch nicht mit dem Import dieser Pakete...
              =>Abhilfe, damit Script ausgeführt werden kann "Run -> Configuration" gemäss
                https://youtrack.jetbrains.com/issue/PY-27234#focus=streamItem-27-3184933-0-0
                -"Anaconda Prompt" starten
                -conda Environment aktivieren: "activate radioline_map"
                -Inhalt von "PATH"-Variable in Zwischenablage kopieren: "echo %PATH%"
                -in PyCharm "PATH"-Variable anlegen in "Run|Edit Configurations...|<run_configuration_or_template>|Environment variables"
  ==>ACHTUNG: manchmal sieht man in PyCharm, in "Anaconda Prompt" und "Anaconda Navigator"
     jeweils mit den Paketmanagern "Conda" und "pip" unterschiedliche Paketversionen... Grund unbekannt.
    (falls sich PyPI-Pakete im PyCharm-Projekt nicht anzeigen lassen:
        "Anaconda Prompt" starten -> "activate radioline_map", "pip install <<Python package>>")
  ==>HINWEIS: bei SSL-Zertifikatsfehler das betroffene Package ebenfalls manuell ausserhalb von PyCharm installieren!


Für exakte Duplizierung der Entwicklungsumgebung die Version aller genutzten Conda-Packages erfassen:
(gemäss https://datascience.stackexchange.com/questions/24093/how-to-clone-python-working-environment-on-another-machine)
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate radioline_map"
"cd C:\Users\Asenta\PycharmProjects\radioline_map"
"conda env export > environment.yml" erzeugt Datei "environment.yml"
=>Wiederherstellung klappe dann folgendermassen: "conda env create -f environment.yml" // dies habe ich noch nicht ausprobiert...



7) Veröffentlichung Projekt:

Vorbereitung: ev. folgende Dateien überarbeiten:
.gitignore	// Unterordner ".idea" schliesse ich nicht aus git aus, vielleicht nützt es mal in Zukunft, wenn komplette Umgebung neu installiert werden muss
CHANGES.txt
LICENSE.txt
MANIFEST.in	// Inhalt ist mir nicht mehr ganz klar... :-/
README.md	// in "Pycharm" gibts guten "MarkDown"-Editor! Die gerenderte Ausgabe wird auf GitHub Projektwebseite veröffentlicht
requirements.txt  // inkl. Versionsangaben von Hand pflegen, ergibt in GitHub den "dependency graph"
                    https://help.github.com/articles/listing-the-packages-that-a-repository-depends-on/
                    (Imports durchgehen, hier nachsehen: "Pycharm" -> "Settings" -> "Project: radioline_map" -> "Interpreter",
                    Teile von "environment.yml" kopieren, Aufbau dieser Datei siehe https://www.jetbrains.com/help/pycharm/managing-dependencies.html )


in PyCharm:
->Einstellungen ->VCS GitHub Account hinterlegen
->VCS ->Import into Version Control ->Share Project on GitHub (NUR beim ersten Mal und falls es noch nicht existiert!)
->VCS ->Git ->Commit (nach jeder Code-Änderung, dies beeinflusst nur lokales Repository)
->VCS ->Git ->Push... (dies lädt die letzten Änderungen auf GitHub)


==>>FIXME: Freezing der Python-Umgebung in EXE-Dateien klappte nach Stunden nur mit "cx_Freeze", siehe weiter unten... Ist auch elegantere Lösung möglich?
Windows EXE-Datei erstellen :
=>siehe Anleitung unter
https://pyinstaller.readthedocs.io/en/stable/operating-mode.html#bundling-to-one-file
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate radioline_map"
-in Projektverzeichnis wechseln: "cd C:\Users\Asenta\PycharmProjects\radioline_map"
"pyinstaller --onedir --console --name radioline_map_v0.0.1_x86 radioline_map\generate_map.py"
==>dies generiert ein Unterverzeichnis unter "..\dist",
 dieses in ZIP-File packen und auf GitHub als Release veröffentlichen

-"pyinstaller --onefile --console --name radioline_map_v0.0.1_x86 radioline_map\generate_map.py"
==>dies generiert die einzelne EXE-Datei unter "..\dist",
diese kann auf GitHub als Release hochgeladen werden.

Erklärung zu zweitem Pack-Vorgang:
=>Python 3.x gepackt mittels PyInstaller und Entpacken zur Laufzeit läuft nicht immer. Darum beide Varianten... :-/

Einfache Projekte ohne diverse Daten-Files können zu einem einzelnen EXE-File gepackt werden.
Bei der Ausführung wird der Inhalt in temporäres Verzeichnis extrahiert und der Python Interpreter ausgeführt.
(zu beachten: auch wenn Python-Scripte in PyCharm fehlerfrei abgearbeitet werden,
das Zusammenschnüren zu einem EXE-File birgt verschiedene Risiken...
z.B. nicht aufgelöste Abhängigkeiten,
oder z.B. falsches Encoding beim Textdatei-Handling im Konsolenprogramm, etc.
http://python-notes.curiousefficiency.org/en/latest/python3/text_file_processing.html


~~~~~~~~~~~~~
Versuch gemäss https://pythonhosted.org/PyInstaller/spec-files.html
-"spec"-File generieren:
 "pyi-makespec --onedir --console --name radioline_map_v0.0.1_x86 radioline_map\generate_map.py"
-generiertes File editieren und gemäss https://pythonhosted.org/PyInstaller/spec-files.html#using-data-files-from-a-module
 die Zeilen mit "added_files" hinzufügen
-zudem noch Codeteil von https://stackoverflow.com/questions/35811448/pyinstaller-jinja2-templatenotfound einfügen,
 da das Package "Jinja2" "pkg_resources" nutzt und PyInstaller dies momentan noch nicht unterstützt... :-/

-PyInstaller ausführen:
 "pyinstaller radioline_map_v0.0.1_x86.spec"

==>"Übung halt, Übung abgebrochen..." Ich versuche nun "py2exe" anstelle "PyInstaller"

TEST mit "py2exe":
-"setup.py" erstellen
-in "Anaconda Prompt" im Projektverzeichnis Folgendes ausführen:
 "python setup.py py2exe"

==>Leider klappt es nicht... Offenbar ist py2exe nicht kompatibel mit Python 3.6 :-(
siehe Diskussion unter https://stackoverflow.com/questions/41578808/python-indexerror-tuple-index-out-of-range-when-using-py2exe


TEST mit "cx_Freeze": ==>Versuch hat schlussendlich über mehrere Umwege geklappt!
(basierend auf Beispiel https://stackoverflow.com/a/48271935 )
=>"pip install cx_freeze" klappt erst, wenn die "Microsoft Visual C++ Build Tools" v14 oder neuer installiert werden!
https://visualstudio.microsoft.com/visual-cpp-build-tools/
==>pip sollte eigentlich nun "cx_freeze" mit dem C++ compiler kompilieren. Jedoch klappt es nicht, diverse Fehler... :-(

Idee: Binärfile für Windows x86 / Python 3.7 installieren, leider fehlt dieses "wheel" auf Webseite:
https://pypi.org/project/cx_Freeze/#files
=>Alternative gemäss https://stackoverflow.com/questions/50686243/cant-install-cx-freeze-or-scipy-python-3-7-64-bit
"pip install https://download.lfd.uci.edu/pythonlibs/r5uhg2lo/cx_Freeze-5.1.1-cp37-cp37m-win32.whl"
 (und gleich die URL in "requirements.txt" einfügen!)

diverse Infos von https://stackoverflow.com/questions/15486292/cx-freeze-doesnt-find-all-dependencies
=>"setup.py" im Projektverzeichnis erstellen,
  Beispiele gibt es hier: https://github.com/anthony-tuininga/cx_Freeze/tree/master/cx_Freeze/samples
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate radioline_map"
-in Projektverzeichnis wechseln: "cd C:\Users\Asenta\PycharmProjects\radioline_map"
-Freeze-Vorgang starten: "python setup.py build"
 ==>in normalem Windows Command Prompt in Projektverzeichnis wechseln und "dist\radioline_map.exe" starten
 ==>iterativ alle fehlenden Ressourcen in "setup.py" einfügen und Freeze-Vorgang erneut durchführen...
 (sehr mühsame Sache... Trial and Error...)
z.B. Nachinstallation via conda folgender Packages: "appdirs", "packaging"
z.B. gemäss https://gist.github.com/hangtwenty/b9820fe204eebb0cc5b9aba49f3c8b22
   "pip install --upgrade setuptools"

=>wenn die EXE-Datei in "dist\" korrekt ausgeführt wird, dann die Files in ein ZIP packen,
 auf zweitem Rechner ausprobieren und releasen! :-)

~~~~~~~~~~~~~







-vor Veröffentlichung:
  -Testlauf der Anwendung.
   (Sie könnte sich ausserhalb von PyCharm und/oder mit PyInstaller gepackt anders verhalten, z.B. fehlende Dateien)
  -leider sporadisch Antivirus-Fehlalarme aufgrund Heuristik,
   da kann man nicht viel machen... (Prüfung mittels https://www.virustotal.com sollte nicht zu viele Treffer ergeben)
   =>Abhilfe 1): erzeugte EXE im Antivirenprogramm zu den Ausnahmen hinzufügen
   =>Abhilfe 2): Beim Hersteller des EIGENEN Antivirenprogrammes erzeugte EXE als "false positive" melden


